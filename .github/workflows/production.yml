name: Build and Deploy production

on:
  push:
    branches:
      - main

jobs:
  # build_and_run_project_1:
  #   name: Build and Run Project 1
  #   runs-on: self-hosted

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Check running containers on port
  #     run: |
  #       $CONTAINER_ID = docker ps -q --filter "publish=5001"
  #       if ($CONTAINER_ID) {
  #         Write-Output "Found container running on port 5001 with ID: $CONTAINER_ID"
  #         docker rm -f $CONTAINER_ID
  #       }
  #       else {
  #         Write-Output "No container found running on port 5001"
  #       }

  #   - name: Build and run Docker for Project 1
  #     run: |
  #       cd project1
  #       docker build -t nodejs-crud-prod-project-1 .
  #       docker run -dp 5001:5001 --name prod-project-1 nodejs-crud-prod-project-1

  # build_and_run_project_2:
  #   name: Build and Run Project 2
  #   runs-on: self-hosted

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Check running containers on port
  #     run: |
  #       $CONTAINER_ID = docker ps -q --filter "publish=4001"
  #       if ($CONTAINER_ID) {
  #         Write-Output "Found container running on port 4001 with ID: $CONTAINER_ID"
  #         docker rm -f $CONTAINER_ID
  #       }
  #       else {
  #         Write-Output "No container found running on port 4001"
  #       }

  #   - name: Build and run Docker for Project 2
  #     run: |
  #       cd project2
  #       docker build -t nodejs-crud-prod-project-2 .
  #       docker run -dp 4001:4001 --name prod-project-2 nodejs-crud-prod-project-2
  
  get-package-version:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get Package Version
        id: get-version
        run: |
          $Version = (Get-Content package.json | ConvertFrom-Json).version
          Write-Host "The package version is $Version"
     
      - name: Get Package Version
        id: get-version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "::set-output name=package_version::$VERSION"
          
      - name: Use Package Version
        run: |
          echo "The package version is ${{ steps.get-version.outputs.package_version }}"
